name: 'Terraform'
 
on:
  push:
    branches:
    - main
  pull_request:
 
jobs:
  terraform:
    name: 'Terraform'
    env:
      ARM_CLIENT_ID: ${{ secrets.CLIENT_ID }}
      ARM_CLIENT_SECRET: ${{ secrets.CLIENT_SECRET }}
      ARM_SUBSCRIPTION_ID: ${{ secrets.SUBSCRIPTION_ID }}
      ARM_TENANT_ID: ${{ secrets.TENANT_ID }}
    runs-on: ubuntu-latest
    environment: production
 
    # Use the Bash shell regardless whether the GitHub Actions runner is ubuntu-latest, macos-latest, or windows-latest
    defaults:
      run:
        shell: bash
        working-directory: Modules/CreateAKS

 
    steps:
    # Checkout the repository to the GitHub Actions runner
    - name: Checkout
      uses: actions/checkout@v2

   # - name: Setup upterm session
   #   uses: lhotari/action-upterm@v1  

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v1
      with:
        cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}   
 
    - name: Terraform Init
      run: terraform init

    - name: check the PWD
      run: pwd
  

    #- name: check the list of files
    #  run: cd ../

    #- name: list2
    # run: ls -al   


    # Checks that all Terraform configuration files adhere to a canonical format
    - name: Terraform Format
      run: terraform get

    - name: Terraform Input
      run: terraform init

    # Generates an execution plan for Terraform
    - name: Terraform Plan
      run: terraform plan

      # On push to main, build or change infrastructure according to Terraform configuration files
      # Note: It is recommended to set up a required "strict" status check in your repository for "Terraform Cloud". See the documentation on "strict" required status checks for more information: https://help.github.com/en/github/administering-a-repository/types-of-required-status-checks
    - name: Terraform Apply
      if: github.ref == 'refs/heads/main' && github.event_name == 'push'
      run: terraform apply -auto-approve

    - name: PWD
      run:  pwd

    - uses: actions/upload-artifact@v2
      with:
        name: kubeconfig
        path: /home/runner/work/CreateAKS/CreateAKS/Modules/CreateAKS/

    - name: read kubecltconfig
      run: | 
        mkdir ${HOME}/.kube
        cp -r /home/runner/work/CreateAKS/CreateAKS/Modules/CreateAKS/kubeconfig ${HOME}/.kube/config
        cat ${HOME}/.kube/config

    # install Helm in ubuntu
    - name: install helm 01
      run:  |
        curl https://baltocdn.com/helm/signing.asc | sudo apt-key add -
        sudo apt-get install apt-transport-https --yes
        echo "deb https://baltocdn.com/helm/stable/debian/ all main" | sudo tee /etc/apt/sources.list.d/helm-stable-debian.list   

    - name: update helm binary
      run:  |
        sudo apt-get update
        sudo apt-get install helm
  
    - name: Change direcory to the HelmAKS
      run:  |
      cd /home/runner/work/CreateAKS/CreateAKS/HelmAKS
      pwd
      ls -al
      helm package HelmAKS 
      ls -al
      helm install release1 HelmAKS-0.1.0.tgz   

    - uses: actions/upload-artifact@v2
      with:
        name: HelmAKS-0.1.0.tgz
        path: /home/runner/work/CreateAKS/CreateAKS/HelmAKS/    

    #- name: kubectl executing
    #  run: kubectl get node

    #- name: Apply deployment
    #  run: |
    #    kubectl apply -f deployment.yaml
    #    kubectl get pods

    #- name: Apply Service
    #  run: |
    #    kubectl apply -f service.yaml
    #    kubectl get svc
    
    - name: get service details
      run:  kubectl get svc    

    #- name: Apply Nginx ingress
    #  run: |     
    #    kubectl apply -f ingress.yaml

    - name: discribe ingress 
      run:  kubectl describe ingress hello-kubernetes     

    #- name: install helm 01
    #  run:  |
    #    sudo apt-get update
    #    sudo apt-get install helm

    #- name: execute helm package 
    #  run:  helm install release1 HelmAKS-0.1.0.tgz  

